---
- name: Install Vanilla Kubernetes (kubectl + minikube) on Ubuntu as Root
  hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Display current user information
      debug:
        msg: |
          Running as: {{ ansible_user }}
          UID: {{ ansible_user_uid }}
          This playbook will install Kubernetes as root user with special configuration.

    - name: Verify Docker is installed and running
      shell: docker --version
      register: docker_version
      failed_when: docker_version.rc != 0

    - name: Verify Docker daemon is running
      shell: docker info
      register: docker_info
      failed_when: docker_info.rc != 0

    - name: Display Docker status
      debug:
        msg: "✅ Docker is running: {{ docker_version.stdout }}"

    # Install kubectl (exact commands from your documentation)
    - name: Download latest stable kubectl
      shell: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

    - name: Make kubectl executable
      shell: chmod +x kubectl

    - name: Move kubectl to system PATH
      shell: mv kubectl /usr/local/bin/

    - name: Verify kubectl installation
      shell: kubectl version --client
      register: kubectl_version
      changed_when: false

    # Install minikube (exact commands from your documentation)
    - name: Download latest minikube
      shell: curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

    - name: Make minikube executable
      shell: chmod +x minikube

    - name: Move minikube to system PATH
      shell: mv minikube /usr/local/bin/

    - name: Verify minikube installation
      shell: minikube version
      register: minikube_version
      changed_when: false

    # Fix permission issues for root minikube execution
    - name: Apply minikube permission fix
      shell: sysctl fs.protected_regular=0
      failed_when: false

    - name: Clean up any existing minikube configuration
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /root/.minikube
        - /tmp/juju-mk*
      failed_when: false

    - name: Create minikube directory with proper permissions
      file:
        path: /root/.minikube
        state: directory
        mode: '0755'

    # Start Kubernetes Cluster as root with --force flag (as per documentation)
    - name: Start minikube cluster with Docker driver as root (attempt 1)
      shell: |
        export MINIKUBE_IN_STYLE=false
        export CHANGE_MINIKUBE_NONE_USER=true
        minikube start --driver=docker --force
      timeout: 600
      when: start_cluster == "yes"
      register: minikube_start_result
      failed_when: false

    - name: Try alternative minikube start with none driver if docker fails
      shell: |
        export MINIKUBE_IN_STYLE=false
        export CHANGE_MINIKUBE_NONE_USER=true
        minikube start --driver=none --force
      timeout: 600
      when: start_cluster == "yes" and minikube_start_result.rc != 0
      register: minikube_start_none
      failed_when: false

    - name: Try minikube start with additional flags if previous attempts failed
      shell: |
        export MINIKUBE_IN_STYLE=false
        export CHANGE_MINIKUBE_NONE_USER=true
        minikube start --driver=docker --force --alsologtostderr
      timeout: 600
      when: start_cluster == "yes" and minikube_start_result.rc != 0 and minikube_start_none.rc != 0
      register: minikube_start_final

    - name: Display minikube start output
      debug:
        msg: |
          Minikube Start Results:
          {% if minikube_start_result.rc == 0 %}
          ✅ SUCCESS with Docker driver:
          {{ minikube_start_result.stdout }}
          {% elif minikube_start_none is defined and minikube_start_none.rc == 0 %}
          ✅ SUCCESS with None driver:
          {{ minikube_start_none.stdout }}
          {% elif minikube_start_final is defined and minikube_start_final.rc == 0 %}
          ✅ SUCCESS with additional flags:
          {{ minikube_start_final.stdout }}
          {% else %}
          ❌ FAILED attempts:
          Docker driver error: {{ minikube_start_result.stderr | default('No error message') }}
          {% if minikube_start_none is defined %}
          None driver error: {{ minikube_start_none.stderr | default('No error message') }}
          {% endif %}
          {% if minikube_start_final is defined %}
          Final attempt error: {{ minikube_start_final.stderr | default('No error message') }}
          {% endif %}
          {% endif %}
      when: start_cluster == "yes"

    - name: Determine successful minikube start
      set_fact:
        minikube_started: >-
          {{
            (minikube_start_result.rc == 0) or
            (minikube_start_none is defined and minikube_start_none.rc == 0) or
            (minikube_start_final is defined and minikube_start_final.rc == 0)
          }}
      when: start_cluster == "yes"

    # Verify installation (commands from your documentation)
    - name: Check cluster status
      shell: minikube status
      register: cluster_status
      when: start_cluster == "yes" and minikube_started
      failed_when: false

    - name: View all system pods (core components)
      shell: kubectl get pods -n kube-system
      register: system_pods
      when: start_cluster == "yes" and minikube_started
      failed_when: false

    - name: Check cluster nodes
      shell: kubectl get nodes
      register: cluster_nodes
      when: start_cluster == "yes" and minikube_started
      failed_when: false

    - name: View cluster information
      shell: kubectl cluster-info
      register: cluster_info
      when: start_cluster == "yes" and minikube_started
      failed_when: false