---
- name: Install Vanilla Kubernetes (kubectl + minikube) on Ubuntu as Root
  hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Display current user information
      debug:
        msg: |
          Running as: {{ ansible_user }}
          UID: {{ ansible_user_uid }}
          This playbook will install Kubernetes as root user with special configuration.

    - name: Verify Docker is installed and running
      shell: docker --version
      register: docker_version
      failed_when: docker_version.rc != 0

    - name: Verify Docker daemon is running
      shell: docker info
      register: docker_info
      failed_when: docker_info.rc != 0

    - name: Display Docker status
      debug:
        msg: "✅ Docker is running: {{ docker_version.stdout }}"

    # Install kubectl (exact commands from your documentation)
    - name: Download latest stable kubectl
      shell: curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"

    - name: Make kubectl executable
      shell: chmod +x kubectl

    - name: Move kubectl to system PATH
      shell: mv kubectl /usr/local/bin/

    - name: Verify kubectl installation
      shell: kubectl version --client
      register: kubectl_version
      changed_when: false

    # Install minikube (exact commands from your documentation)
    - name: Download latest minikube
      shell: curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64

    - name: Make minikube executable
      shell: chmod +x minikube

    - name: Move minikube to system PATH
      shell: mv minikube /usr/local/bin/

    - name: Verify minikube installation
      shell: minikube version
      register: minikube_version
      changed_when: false

    # Start Kubernetes Cluster as root with --force flag (as per documentation)
    - name: Start minikube cluster with Docker driver as root
      shell: minikube start --driver=docker --force
      timeout: 600
      when: start_cluster == "yes"
      register: minikube_start_result

    - name: Display minikube start output
      debug:
        msg: "{{ minikube_start_result.stdout_lines }}"
      when: start_cluster == "yes" and minikube_start_result is defined

    # Verify installation (commands from your documentation)
    - name: Check cluster status
      shell: minikube status
      register: cluster_status
      when: start_cluster == "yes"
      failed_when: false

    - name: View all system pods (core components)
      shell: kubectl get pods -n kube-system
      register: system_pods
      when: start_cluster == "yes"
      failed_when: false

    - name: Check cluster nodes
      shell: kubectl get nodes
      register: cluster_nodes
      when: start_cluster == "yes"
      failed_when: false

    - name: View cluster information
      shell: kubectl cluster-info
      register: cluster_info
      when: start_cluster == "yes"
      failed_when: false

    - name: Display final status
      debug:
        msg: |
          🎉 Vanilla Kubernetes Installation Complete!
          
          ✅ kubectl: {{ kubectl_version.stdout }}
          ✅ minikube: {{ minikube_version.stdout }}
          👤 Running as: root user
          
          {% if start_cluster == "yes" %}
          🚀 Kubernetes Cluster Status:
          {% if cluster_status.rc == 0 %}
          {{ cluster_status.stdout }}
          {% endif %}
          
          {% if cluster_info.rc == 0 %}
          📋 Cluster Information:
          {{ cluster_info.stdout }}
          {% endif %}
          
          {% if cluster_nodes.rc == 0 %}
          🏷️  Cluster Nodes:
          {{ cluster_nodes.stdout }}
          {% endif %}
          
          {% if system_pods.rc == 0 %}
          🧩 Core Kubernetes Components Running:
          {{ system_pods.stdout_lines | length }} system pods active
          {% endif %}
          
          {% else %}
          ⏸️  Kubernetes Cluster: Ready to start
          ▶️  To start: minikube start --driver=docker --force
          {% endif %}

          🔧 Useful Commands (from documentation):
          • Check status: minikube status
          • View system pods: kubectl get pods -n kube-system
          • Check nodes: kubectl get nodes
          • Cluster info: kubectl cluster-info
          • All pods: kubectl get pods -A
          • Stop cluster: minikube stop
          • Delete cluster: minikube delete
          • Access dashboard: minikube dashboard