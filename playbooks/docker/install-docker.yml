---
- name: Install Docker Engine on Ubuntu (AAP Survey Version)
  hosts: all
  become: yes
  gather_facts: yes

  tasks:
    - name: Verify Ubuntu OS
      fail:
        msg: "This playbook is designed for Ubuntu systems only. Detected: {{ ansible_distribution }}"
      when: ansible_distribution != "Ubuntu"

    # Uninstall old versions (exact command from your doc)
    - name: Remove conflicting Docker packages
      shell: |
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do 
          apt-get remove -y $pkg 2>/dev/null || true
        done

    - name: Remove old Docker data (if clean installation requested)
      file:
        path: /var/lib/docker
        state: absent
      when: clean_install == "yes"

    # Set up Docker's apt repository (exact steps from your doc)
    - name: Update apt package index
      shell: apt-get update

    - name: Install ca-certificates and curl
      shell: apt-get install -y ca-certificates curl

    - name: Create keyrings directory
      shell: install -m 0755 -d /etc/apt/keyrings

    - name: Add Docker's official GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        chmod a+r /etc/apt/keyrings/docker.asc

    - name: Add Docker repository to Apt sources
      shell: |
        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo "${UBUNTU_CODENAME:-$VERSION_CODENAME}") stable" | \
        tee /etc/apt/sources.list.d/docker.list > /dev/null

    - name: Update apt after adding Docker repository
      shell: apt-get update

    # Install Docker packages (exact command from your doc)
    - name: Install latest Docker packages
      shell: apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

    # Post-installation steps
    - name: Start and enable Docker service
      systemd:
        name: docker
        state: started
        enabled: yes

    - name: Add specified user to docker group
      user:
        name: "{{ docker_user }}"
        groups: docker
        append: yes
      when: docker_user is defined and docker_user != ""